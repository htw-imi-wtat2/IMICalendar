
<%= form_with(model: event, local: true) do |form| %>

  <div class = "container">
    <div class = "row">
      <div class = "col-md-6 col-xs-12 ">
        <% if event.errors.any? %>
          <div id="error_explanation">
             <h2><%= pluralize(event.errors.count, "error") %> prohibited this event from being saved:</h2>
             <ul>
             <% event.errors.full_messages.each do |message| %>
               <li><%= message %></li>
             <% end %>
             </ul>
           </div>
        <% end %>


  <h2><%= @title %></h2 >
  <div class="form-group">
    <%= form.label :title %>
    <%= form.text_field :title, id: :event_title, class: "form-control  form-control-lg" %>
  </div>

    <div class="form-group">
      <%= form.label :categories %>
      <%= text_field_tag(:categories, value = @categories_s, id: 'categories', class: "form-control") %>
      <p><small class="form-text text-muted">Available Categories: <%= @categories_all %> - just type name to create a new one</small></p>
    </div>

  <div class="form-group">
    <%= form.label :start_date %>
    <%= form.datetime_select :start_date, id: :event_start_date %>
  </div>

  <div class="form-group">
    <%= form.label :end_date %>
    <%= form.datetime_select :end_date, id: :event_end_date %>
  </div>

  <div class="form-group">
    <%= form.label :location %>
    <%= form.text_field :location, id: :event_location, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :description %>
    <%= form.text_area :description, id: :event_description, class: "form-control" %>
  </div>

</div>
<div class = "col-md-6 col-xs-12 ">

<h2>Planning State</h2>
  <% planning_state = @planning_state %>
  <%= form.fields_for :planning_state, planning_state do |ps_form| %>
    <% if planning_state.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(planning_state.errors.count, "error") %> prohibited this planning_state from being saved:</h2>

        <ul>
        <% planning_state.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
        </ul>
      </div>
    <% end %>


    <div class="form-group">
      <%= ps_form.label :notes %>
      <%= ps_form.text_area :notes, id: :planning_state_notes, class: "form-control", rows: 6 %>
    </div>

    <div class = "row ">
      <div class = "col-md-6 col-xs-2 ">
        &nbsp;
      </div>
      <div class = "col-md-6 col-xs-10 align-self-end">
        <% ['date_set','room_booked','announced'].each do | ps | %>
        <div class="form-check">
          <label class="form-check-label ">
          <%= ps_form.check_box ps, id: "planning_state_#{ps}", class: "form-check-input" %>
          <%= PlanningState.human_attribute_name(ps) %>
          </label>
        </div>
        <% end %>
      </div>
    </div>
<br/ >
    <div class="form-group ">
      <%= form.submit(class: "btn btn-primary") %>
    </div>



<% end %>

    </div>
  </div>
</div>

<% end %>
  <!-- end form -->

<!-- autocomplete script for categories -->
<%
# for documentation see:
# https://jqueryui.com/autocomplete/#multiple
# http://api.jqueryui.com/autocomplete/
%>
<script>
  $( function() {
    var availableTags = [<%= raw(@categories_js)%>];
    function split( val ) {
      return val.split( /,\s*/ );
    }
    function extractLast( term ) {
      return split( term ).pop();
    }

    $( "#categories" )
      // don't navigate away from the field on tab when selecting an item
      .on( "keydown", function( event ) {
        if ( event.keyCode === $.ui.keyCode.TAB &&
            $( this ).autocomplete( "instance" ).menu.active ) {
          event.preventDefault();
        }
      })
      .autocomplete({
        minLength: 0,
        source: function( request, response ) {
          // delegate back to autocomplete, but extract the last term
          response( $.ui.autocomplete.filter(
            availableTags, extractLast( request.term ) ) );
        },
        focus: function() {
          // prevent value inserted on focus
          return false;
        },
        select: function( event, ui ) {
          var terms = split( this.value );
          // remove the current input
          terms.pop();
          // add the selected item
          terms.push( ui.item.value );
          // add placeholder to get the comma-and-space at the end
          terms.push( "" );
          this.value = terms.join( ", " );
          return false;
        }
      });
  } );
</script>
